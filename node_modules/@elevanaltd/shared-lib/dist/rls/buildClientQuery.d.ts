/**
 * Build Client Query - RLS Query Builder with InitPlan Optimization
 * Pattern extracted from scripts-web MVP (proven <50ms performance)
 *
 * PURPOSE: Create Supabase queries with efficient client_filter JOINs
 * OPTIMIZATION: Uses InitPlan pattern to reduce 50-100ms overhead
 *
 * @example
 * ```typescript
 * // Client query with automatic filtering
 * const query = buildClientQuery(supabase, 'projects', userId)
 * const { data } = await query.select('*')
 *
 * // Admin bypass (no filtering)
 * const adminQuery = buildClientQuery(supabase, 'projects', adminId, { isAdmin: true })
 * ```
 */
import type { SupabaseClient } from '@supabase/supabase-js';
import type { Database } from '../types/index.js';
export interface BuildClientQueryOptions {
    /**
     * Bypass client_filter check (admin users)
     * Default: false
     */
    isAdmin?: boolean;
    /**
     * Custom column name for client filtering
     * Default: 'client_filter'
     */
    filterColumn?: string;
    /**
     * Table name for user-client mappings
     * Default: 'user_clients'
     */
    userClientsTable?: string;
}
/**
 * Build Supabase query with client_filter optimization
 *
 * Uses InitPlan pattern: WHERE client_filter IN (SELECT client_filter FROM user_clients WHERE user_id = $1)
 * This reduces query complexity from 4-table JOIN to single subquery
 *
 * @param client - Supabase client instance
 * @param table - Table name to query
 * @param userId - Current user ID
 * @param options - Query options (admin bypass, custom columns)
 * @returns Supabase query builder with RLS optimization
 */
export declare function buildClientQuery(client: SupabaseClient<Database>, table: string, userId: string, options?: BuildClientQueryOptions): ReturnType<SupabaseClient<Database>['from']>;
//# sourceMappingURL=buildClientQuery.d.ts.map