/**
 * Test RLS Policy - Integration Test Helper
 * Pattern extracted from scripts-web MVP (proven RLS validation)
 *
 * PURPOSE: Validate RLS policies across multiple roles
 * PATTERN: Sign in as each role → Test read/write access → Compare with expectations
 *
 * @example
 * ```typescript
 * const results = await testRLSPolicy(client, {
 *   table: 'projects',
 *   roles: {
 *     admin: { email: 'mock-admin@test.com', password: 'mock-password' },
 *     client: { email: 'mock-client@test.com', password: 'mock-password' }
 *   },
 *   expectations: {
 *     admin: { canRead: true, canWrite: true },
 *     client: { canRead: true, canWrite: false }
 *   }
 * })
 *
 * console.log(results.admin.canRead) // true
 * console.log(results.client.canWrite) // false
 * ```
 */
import type { SupabaseClient } from '@supabase/supabase-js';
import type { Database } from '../types/index.js';
export interface RoleCredentials {
    email: string;
    password: string;
}
export interface RoleExpectations {
    canRead: boolean;
    canWrite: boolean;
}
export interface TestRLSPolicyConfig {
    table: string;
    roles: Record<string, RoleCredentials>;
    expectations: Record<string, RoleExpectations>;
}
export interface RLSPolicyTestResult {
    canRead: boolean;
    canWrite: boolean;
    readError?: string;
    writeError?: string;
}
export type RLSPolicyTestResults = Record<string, RLSPolicyTestResult>;
/**
 * Test RLS policy against multiple roles
 *
 * Validates read and write access for each role
 * Returns detailed results including any errors
 *
 * @param client - Supabase client instance
 * @param config - Test configuration with roles and expectations
 * @returns Results for each role
 */
export declare function testRLSPolicy(client: SupabaseClient<Database>, config: TestRLSPolicyConfig): Promise<RLSPolicyTestResults>;
//# sourceMappingURL=testRLSPolicy.d.ts.map