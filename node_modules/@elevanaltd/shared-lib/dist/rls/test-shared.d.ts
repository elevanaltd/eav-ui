/**
 * Shared Test Utilities for RLS Module
 * Phase 2 Day 5: Test co-location remediation
 *
 * Constitutional Principle: DRY while maintaining 1:1 test file ratio
 *
 * Provides common test infrastructure to avoid duplication across
 * per-file test files while complying with test co-location mandate.
 *
 * NOTE: This file is a test utility helper, not implementation requiring tests.
 * Pattern: Similar to vitest's describe/it/expect - shared test infrastructure.
 * TDD Exception: Shared test utilities don't require tests (self-validating via usage).
 */
import { vi } from 'vitest';
import type { SupabaseClient } from '@supabase/supabase-js';
import type { Database } from '../types/index.js';
/**
 * Test configuration constants
 * Would use real Supabase in integration tests
 */
export declare const TEST_SUPABASE_URL = "https://test.supabase.co";
export declare const TEST_SUPABASE_KEY = "test-key";
/**
 * Creates a mock Supabase client for RLS testing
 *
 * @returns Mock SupabaseClient with common methods stubbed
 */
export declare function createMockSupabaseClient(): SupabaseClient<Database>;
/**
 * Mock query builder return type
 */
interface MockQueryBuilder {
    select: ReturnType<typeof vi.fn>;
    eq: ReturnType<typeof vi.fn>;
    single: ReturnType<typeof vi.fn>;
    [key: string]: unknown;
}
/**
 * Creates a mock query builder with customizable behavior
 *
 * @param overrides - Custom behavior for query builder methods
 * @returns Mock query builder
 */
export declare function createMockQueryBuilder(overrides?: Record<string, unknown>): MockQueryBuilder;
/**
 * Mock user context type
 */
interface MockUserContext {
    id: string;
    email: string;
    role: string;
}
/**
 * Creates a mock authenticated user context
 *
 * @param userId - User ID to use in mock
 * @returns Mock user context
 */
export declare function createMockUserContext(userId: string): MockUserContext;
/**
 * Test role configurations for RLS policy testing
 */
export declare const TEST_ROLES: {
    admin: {
        email: string;
        password: string;
    };
    client: {
        email: string;
        password: string;
    };
    unauthorized: {
        email: string;
        password: string;
    };
};
/**
 * Standard RLS policy expectations for testing
 */
export declare const RLS_EXPECTATIONS: {
    admin: {
        canRead: boolean;
        canWrite: boolean;
    };
    client: {
        canRead: boolean;
        canWrite: boolean;
    };
    unauthorized: {
        canRead: boolean;
        canWrite: boolean;
    };
};
export {};
//# sourceMappingURL=test-shared.d.ts.map