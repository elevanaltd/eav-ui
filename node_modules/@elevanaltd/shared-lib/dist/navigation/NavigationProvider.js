import { jsx as _jsx } from "react/jsx-runtime";
/**
 * Navigation Provider
 *
 * React context provider for hierarchical navigation state management.
 * Handles project/video selection with automatic state synchronization.
 *
 * Extracted from scripts-web to enable reuse across EAV apps.
 */
import { createContext, useContext, useState } from 'react';
const NavigationContext = createContext(undefined);
export function NavigationProvider({ children }) {
    const [selectedProject, setSelectedProject] = useState(null);
    const [selectedVideo, setSelectedVideo] = useState(null);
    const handleSetSelectedProject = (project) => {
        setSelectedProject(project);
        // Clear video selection when switching projects (unless same eav_code)
        if (selectedVideo && project?.eav_code !== selectedVideo.eav_code) {
            setSelectedVideo(null);
        }
    };
    const handleSetSelectedVideo = (video, project) => {
        setSelectedVideo(video);
        // Automatically set project if video provided and project not set
        if (video && project && selectedProject?.id !== project.id) {
            setSelectedProject(project);
        }
    };
    const clearSelection = () => {
        setSelectedProject(null);
        setSelectedVideo(null);
    };
    const isProjectSelected = (projectId) => {
        return selectedProject?.id === projectId;
    };
    const isVideoSelected = (videoId) => {
        return selectedVideo?.id === videoId;
    };
    const value = {
        selectedProject,
        selectedVideo,
        setSelectedProject: handleSetSelectedProject,
        setSelectedVideo: handleSetSelectedVideo,
        clearSelection,
        isProjectSelected,
        isVideoSelected,
    };
    return _jsx(NavigationContext.Provider, { value: value, children: children });
}
/**
 * Hook to access navigation context
 *
 * @throws Error if used outside NavigationProvider
 */
export function useNavigation() {
    const context = useContext(NavigationContext);
    if (context === undefined) {
        throw new Error('useNavigation must be used within a NavigationProvider');
    }
    return context;
}
